name: Deploy to Google Cloud Storage

on:
  push:
    branches:
      - main

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build React app
        run: npm run build
        env:
          CI: ""
          REACT_APP_GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REACT_APP_CLOUD_FUNCTIONS_URL: https://us-central1-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net

      - name: Inject environment variables into build
        run: |
          # Backup the original index.html
          cp build/index.html build/index.html.backup
          
          # Replace %PUBLIC_URL% with actual paths
          sed -i 's|%PUBLIC_URL%||g' build/index.html
          
          # Add environment variables script before closing body tag
          sed -i 's|</body>|  <script>\n    window.env = {\n      REACT_APP_GCP_PROJECT_ID: "${{ secrets.GCP_PROJECT_ID }}",\n      REACT_APP_CLOUD_FUNCTIONS_URL: "https://us-central1-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net"\n    };\n  </script>\n</body>|' build/index.html

      - name: Verify build
        run: |
          if [ ! -d "./build" ]; then
            echo "Build directory not found!"
            exit 1
          fi
          echo "Build directory contents:"
          ls -la ./build
          echo "Environment variables injected into index.html"

      - name: Authorize with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Clear existing bucket contents
        run: |
          gcloud storage rm -r gs://${{ secrets.GCP_BUCKET_NAME }}/* || true

      - name: Upload build to GCS
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: './build'
          destination: ${{ secrets.GCP_BUCKET_NAME }}
          parent: false
          glob: '**'
          exclude: '**/.DS_Store'

      - name: Set Cache-Control on uploaded files
        run: |
          # Set cache headers for different file types
          echo "Setting cache headers for optimal performance..."
          
          # Static assets (JS, CSS) - 1 year cache
          gcloud storage objects update gs://${{ secrets.GCP_BUCKET_NAME }}/static/**/*.js --cache-control="public, max-age=31536000" || echo "No JS files to update"
          gcloud storage objects update gs://${{ secrets.GCP_BUCKET_NAME }}/static/**/*.css --cache-control="public, max-age=31536000" || echo "No CSS files to update"
          
          # HTML files - 1 day cache
          gcloud storage objects update gs://${{ secrets.GCP_BUCKET_NAME }}/*.html --cache-control="public, max-age=86400" || echo "No HTML files to update"
          
          # Images and icons - 1 year cache
          gcloud storage objects update gs://${{ secrets.GCP_BUCKET_NAME }}/*.png --cache-control="public, max-age=31536000" || echo "No PNG files to update"
          gcloud storage objects update gs://${{ secrets.GCP_BUCKET_NAME }}/*.svg --cache-control="public, max-age=31536000" || echo "No SVG files to update"
          gcloud storage objects update gs://${{ secrets.GCP_BUCKET_NAME }}/*.ico --cache-control="public, max-age=31536000" || echo "No ICO files to update"
          
          echo "Cache headers set successfully"

      - name: Invalidate Cloud CDN cache
        run: |
          gcloud compute url-maps invalidate-cdn-cache sudharsana-load-balancer --path "/*"  --global
